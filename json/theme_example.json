{
	"json_version": 0.3,
	"data": {
		"name": "Example",
		"author": "Your Name Here",
		"css": "Your code here. I recommend placing a URL here as opposed to raw code, as placing code into JSON requires a lot of escape characters and pain.\n\n.textarea::before { content: \"\"; }",
		"type": "modern",
		"help": "https://example.com",
		"supports": ["animelist"],
		"background": false,
		"style": [1,2,3,4,5,6,7,8,9,10],
		"flags": ["beta"],
		"columns": {
			"mode": "whitelist",
			"animelist": {
				"Score": true,
				"Episodes": true,
				"Genre": null,
				"Tags": null,
				"Image": true
			}
		},
		"preview": {
			"category": 7,
			"cover": false,
			"columns": {
				"animelist": {
					"Score": true,
					"Episodes": true,
					"Tags": true,
					"Image": true
				}
			}
		},
		"options": {
			"text": {
				"name": "Example text input.",
				"description": "Options can have descriptions. You can do some [b]light BBCode[/b], including lists and [url=https://example.com]URLs[/url]!",
				"type": "text",
				"replacements": [["I will be found!", "I will replace it."]],
				"default": ""
			},
			"textarea": {
				"name": "Example textarea input.",
				"description": "Some fields have validation. This field has a subtype of \"content\" and therefore will be formatted to work correctly with CSS content values.",
				"type": "textarea/content",
				"replacements": [[".textarea::before { content: \"\"; }", ".selector::before { content: {{{insert}}}; }"]]
			},
			"text_qualifiers": {
				"name": "Example text qualifier",
				"description": "There are various other qualifiers for various purposes. See the wiki for all of them.",
				"type": "text/image_url",
				"replacements": [[".text { content: \"previoustext\" }", ".text { content: \"replacement\" }"]]
			},
			"toggle": {
				"name": "Example toggle.",
				"description": "Options can be toggles too! These require three replacement options: find, replace when disabled, and replace when enabled.",
				"type": "toggle",
				"replacements": [["--avatar:url(https://example.com/image.jpg);", "--avatar:none;", "--avatar:url(https://example.com/mynewimage.jpg);"]],
				"default": false
			},
			"value": {
				"name": "Example CSS opacity value.",
				"description": "If you want to provide your users with a bit more context, you can set a text field to a specific CSS value.",
				"type": "text/value/opacity",
				"replacements": [["find", "{{{insert}}}"]],
				"default": "0.8"
			},
			"size": {
				"name": "Example size.",
				"description": "The \"size\" subtype is good for validating CSS length/width/etc units.",
				"type": "text/size",
				"replacements": [["find", "{{{insert}}}"]]
			},
			"range": {
				"name": "Example range value.",
				"description": "Range values are a powerful tool for any number you want to keep within set values. Positions, transparency, blur, and more. You can suffix the values inside replacements, ex. % or px.",
				"type": "range",
				"min": 0,
				"max": 90,
				"step": 0.5,
				"default": 80,
				"replacements": [["top: 80%", "top: {{{insert}}}%"]]
			},
			"color": {
				"name": "Example color value.",
				"description": "You should label colour values with the \"color\" type, as it has a preview of the colour on the right and runs a validation check to see if it's valid.",
				"type": "color",
				"replacements": [["find", "{{{insert}}}"]]
			},
			"advanced_color": {
				"name": "Example advanced color value.",
				"description": "For advanced colour use, you may utilise extra qualifiers for return values.",
				"type": "color/insert/hsl&strip_alpha",
				"replacements": [["find", "{{{insert}}}"]]
			}
		},
		"mods": {
			"mod": {
				"name": "Example mod",
				"description": "Mods can have descriptions too! Enable a mod to expand the options section.",
				"css": {"bottom": ".selector { property: value; }"},
				"requires": ["hidden"],
				"conflicts": ["mod2"],
				"options": {
					"select": {
						"name": "Example dropdown.",
						"type": "select",
						"selections": {
							"opt1": {
								"label": "Option 1",
								"replacements": [["to find",".selector { property: value; }"]]
							},
							"opt2": {
								"label": "Option 2",
								"replacements": [["to find", ".selector { property: value; }"]]
							}
						}
					}
				}
			},
			"mod2": {
				"name": "Example conflict mod",
				"css": {
					"import": "@\\import \"https://example.com/import.css\";",
					"bottom": ".selector { property: value; }"
				},
				"conflicts": ["mod"]
			},
			"mod3": {
				"name": "Example global mod",
				"css": {"bottom": ".selector { property: value; }"},
				"options": {
					"i-affect-everything": {
						"name": "Global change.",
						"description": "Mod options with the \"global\" flag will have their replacements applied to all CSS including the base theme and other mods, not just the mod itself!",
						"type": "text",
						"replacements": ["this text may be from the base theme, or any other mod", "{{{insert}}}"],
						"flags": ["global"]
					}
				}
			},
			"informational": {
				"name": "Example informational/external mod",
				"description": "You can link to external references and guides using the \"url\" key and removing the \"css\" key.",
				"url": "https://example.com",
				"tags": ["Mods can have tags!", "guide"]
			},
			"hidden": {
				"name": "Example hidden.",
				"description": "You can hide mods with the \"hidden\" flag. This can be useful especially for requirements that don't do anything on their own.",
				"css": {
					"import": "@\\import \"https://example.com/import.css\";",
					"bottom": ".selector { property: value; }"
				},
				"flags": ["hidden"]
			}
		}
	}
}